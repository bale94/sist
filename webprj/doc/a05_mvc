# mvc 패턴
1. 모델 1구조
	1) jsp를 이용한 단순한 모델
		페이지와 요청값 전달 ==> 해당 페이지 호출
	2) jsp에서 요청 처리 및 뷰 생성 처리
		- 구현이 쉬움
		- 요청처리 및 뷰 생성 코드가 뒤섞여 코드가 복잡함
		
2. 모델 2구조
	1) 서블릿이 요청을 처리하고 jsp가 뷰를 생성
		요청url ==> 서블릿호출(controller) ==> 모델 데이터 설정
		==> view단 호출(jsp파일) ==> jsp(모델 데이터를 el/jstl출력)
		==> client에 결과를 전달
	2) 모든 요청을 단일 서블릿에서 처리
		- 요청처리 후 결과를 보여줄 jsp로 이동
3. MVC란?
	1) Model-View-Controller
		- 모델: 비즈니스영역의 상태 정보를 처리한다 dao의 데이터도 가져온다
			ex) controller에서 모델 데이터를 request.setAttribute형식으로 처리한다
		- 뷰: 비즈니스 영역에 대한 프레젠테이션 뷰(즉, 사용자가 보게 될 결과화면)를 담당
			jsp로 처리하고 모델로 설정한 데이터를 el, jstl로 처리한다.
		- 컨트롤러: 사용자의 입력 및 흐름제어를 담당한다
		
	2) 특징
		- 로직을 처리하는 모델과 결과화면을 보여주는 뷰가 분리된다
		- 흐름제어나 사용자의 처리요청을 컨트롤러에 집중
	3) 모델2 구조와 맵핑: 컨트롤러-서블릿, 뷰-jsp
	
4. 모델 클래스 처리 내용
	1) 컨트롤러로부터 요청 받음
	2) 비즈니스 로직 수행
	3) 수행결과 컨트롤러에 리턴
	
# MVC 예제
1. controller (A03_Ctroller.java)
	url: mvc03.do
	요청값: /mvc03.do?name=홍길동 ==> request.getParameter("name")
	모델데이터: request.setAttribute("model01", m.getModelData(name));
	뷰단 호출: RequestDispatcher rd = request.getRequestDispatcher("뷰 페이지 호출");
		rd.forward(request.response);
2. model (A03_Model.java)	
	String getModelData(String name){
		return name+"님 안녕하세요(모델호출데이터)";
	}
3. view (a06_mvc/a03_view.jsp)	
	<h2>${model01}</h2> // controller에서 설정한 모델 데이터 출력
	
4. 주의: mvc는 controller단에서 실행해야한다**

# MVC연습예제 url: http://localhost:7080/webprj/mvc04.do? ~~~~
1. controller(A04_Controller.java)
	urlpattern : mvc04.do
	요청값: /mvc04.do?pname=사과&price=2000&cnt=2
	모델데이터처리: request.setAttribute("model04", m04.getProduct(pname,price,cnt));
	view단 호출: 
		String viewPage="a04_jsp/a06_mvc/a04_view.jsp";
		RequestDispatcher rd = request.getRequestDispatcher(viewPage);
		rd.forward(request, response);
2. model(A04_Model.java)
	public String getProduct(String pname, String price, String cnt){
		return "물건명:"+pname+",가격:"+price+",갯수:"+cnt;
	}
3. view (a06_mvc/a04_view.jsp)
	<h3>${model04}</h3>
	
# MVC 연습예제 url:
http://localhost:7080/webprj/mvc05.do?pname=홍길동&record=0.275
홍길동님의 성적은 0.275입니다

# DB와 연동되는 MVC 처리
1. controller: A06_EmpController.java
	String ename=request.getParameter("ename");
	String job=request.getParameter("job");
	
	request.setAttribute("emplist", service.getEmpList(new Emp(ename, job))
	
2. model: A06_EmpService.java: DAO호출해서 처리
3. view: a06_empList.jsp
	<input type="text" name="ename" value="${param.ename}"/>
	<input type="text" name="job" value="${param.job}"/>
	
	<c:forEach var="emp" items="${emplist}">
		${emp.empno}
		${emp.ename}
		${emp.job}
	</c:forEach>
	
	
	
	
	
	