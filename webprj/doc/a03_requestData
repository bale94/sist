# 요청데이터처리
1. client(브라우저)에서 서버(WAS-톰캣안에 java단)프로그램에 요청하는 처리를 말한다
2. 요청은 클라이언트단 화면이나 queryString(url), 내부요청으로 브라우저(client)단에서 처리할 수 있는데,
	요청값을 받는 프로그램은 반드시 backend프로그램(java)만 할 수 있다.
	
	클라이언트(브라우저) =====> 서버(WAS-tomcat)
			url(요청) 페이지명?key=value (get)
			요청body에서 key=value (post)
				<========화면, 데이터(json)
	1) 클라이언트 ==> 서버
		- url 주소를 통해서 특정한 페이지를 호출
		- query string(?key1=value1&key2=value2)
	
3. 요청값 핵심개념
	query string
	요청할페이지?key=value&key=value&..
	요청할페이지?요청1키=요청1값&요청2키=요청2값&..
	1) get방식으로 url을 통해서 요청값을 넘기는 방식
		요청할페이지?key=value&key=value
	2) post방식으로 url(x), 내부에 요청헤드로 key1=value1&key2=value2
		따로 전달해서 처리된다.
		상단에 한글 encoding부분 설정 필요
		request.setCharacterEncoding("utf-8")
		
4. 서버에서 받는 처리
	1) java jsp
		String value = request.getParameter("요청key");
		String[] arrVal = request.getParameterValues("요청key");
		// 요청키로 받은 데이터는 value변수안에 요청값으로 받는다
	2) el : ${param.요청key} ${paramValues.요청key}
	3) usebean을 이용해서 객체로 받기
		VO객체가 자동으로 
			public void setId(String id){}
			public void setPass(int pwd){}
		?id=himan&pass=7777
	4) controller에서 Class로 받기 (servlet)
	5) 스프링에서 매개변수로 객체를 받아서 처리(useBean과 유사하게)
		url: /login.do?id=himan&pass=7777
		@RequestMapping("login.do")
		public String login(Member log){
		
		}
	
5. 다양한 사용자 인터페이스를 활용하여 요청key와 요청값을 받기
	<form action="요청페이지">
		<input name="요청key" value="요청값">
		모양은 type="text|password|*radio|*checkbox|number|date|..."
		<select name="요청key">
			<option>요청값
			<option value="요청값">레이블(label)
			<option value="요청값">레이블(label)
			<option>요청값
		<textarea>...
	1) form 하위의 객체들의 종류 html로 확인하기
	2) form 하위 객체들을 처리하는 css 확인하기
	3) form의 속성과 submit/reset 버튼의 기능, 각 요소객체들이 요청값을 전송시 특징확인하기
		- 각 요소별로 특징
			단일 데이터 전송
			멀티 데이터 전송
		- 요청값을 받을 때 null에 대한 처리, 숫자형 데이터에 대한 처리방법
			기본처리방법
			함수를 활용한 처리방법
			String name = request.getParameter("name");
			if(name==null) name="";
			String ageS = request.getParameter("age");
			int age = 0;
			if(ageS!=null) age = Integer.parseInt(ageS);
			
			name==> null ==> ""	
	4) form 요청값 처리시 서버에 넘어가기 전 처리할 javascript 확인
		서버에 전송되기 전에 입력데이터가 있는지 check해서 전송
		==> 서버에 대한 오류 부담을 줄여준다.
		var idObjVal = document.querySelector("[name=id]").value
		if(idObjVal==""){
			alert("아이디를 입력하세요");
			return;	// 입력이 안되었을때, submit()처리 중단
		}
		// form 전체 데이터를 js(javascript)로 전송처리
		document.querySelector("name=frm01").submit();
	
	5) form과 table등 화면 css/js가 적용된 여러가지 내용 확인해보기
	
	
	